import * as yup from "yup"

export const DoctorSchema = yup.object({
  hoTen: yup.string().required("H·ªç t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"),
  gioiTinh: yup.string().oneOf(["Nam", "N·ªØ"], "Gi·ªõi t√≠nh kh√¥ng h·ª£p l·ªá"),
  email: yup.string().email("Email kh√¥ng h·ª£p l·ªá").required("Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"),
  soDienThoai: yup
    .string()
    .matches(/^[0-9]{10,11}$/, "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá")
    .required("Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"),
  matKhau: yup.string().notRequired(),
  tenKhoa: yup.string().required("T√™n khoa l√† b·∫Øt bu·ªôc"),
  chungChi: yup.string().required("Ch·ª©ng ch·ªâ l√† b·∫Øt bu·ªôc"),
  trinhDo: yup.string().required("Tr√¨nh ƒë·ªô l√† b·∫Øt bu·ªôc"),
  kinhNghiem: yup.number().min(0, "Kinh nghi·ªám kh√¥ng ƒë∆∞·ª£c √¢m").required("Kinh nghi·ªám l√† b·∫Øt bu·ªôc"),
  ngayTuyenDung: yup.string().required("Ng√†y tuy·ªÉn d·ª•ng l√† b·∫Øt bu·ªôc"),
  ghiChu: yup.string().optional(),
  trangThaiHoatDong: yup.boolean(),
})
export type DoctorSchemaType = yup.InferType<typeof DoctorSchema>

export const DoctorAddSchema = DoctorSchema.shape({
  matKhau: yup.string().required("M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"),
})

export const DoctorEditSchema = DoctorSchema.shape({
  id: yup.number().optional(), // üëà th√™m id
})

export const taiKhoanSchema = yup.object({
  soDienThoai: yup
    .string()
    .matches(/^0(?:\d{9}|\d{10})$/, "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá")
    .required("Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"),
})
export type TaiKhoan = yup.InferType<typeof taiKhoanSchema>

const toNull = (v: unknown) => (v === "" || v === undefined ? null : v)
const onlyDigits = (v: unknown) => (typeof v === "string" ? v.replace(/\D/g, "") : v)

export const hoSoSchema = yup.object({
  soDienThoai: yup
    .string()
    .matches(/^0(?:\d{9}|\d{10})$/, "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá")
    .required("Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"),

  lienHeKhanCap: yup
    .string()
    .transform((v) => {
      const d = onlyDigits(v)
      return d === "" ? null : (d as string)
    })
    .nullable()
    .matches(/^0(?:\d{9}|\d{10})$/, {
      message: "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá",
      excludeEmptyString: true,
    }),

  diaChi: yup.string().transform(toNull).nullable(),

  baoHiem: yup
    .string()
    .transform((v) => {
      if (typeof v !== "string") return null
      const s = v.trim().toUpperCase()
      return s === "" ? null : s
    })
    .nullable()
    .matches(/^BH[0-9A-Z]+$/, {
      message: "M√£ BHYT ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng 'BH' v√† ch·ªâ ch·ª©a ch·ªØ/s·ªë",
      excludeEmptyString: true,
    }),

  canCuocCongDan: yup
    .string()
    .transform((v) => {
      const d = onlyDigits(v)
      return d === "" ? null : (d as string)
    })
    .nullable()
    .test(
      "cmnd-cccd",
      "S·ªë CMND/CCCD ph·∫£i g·ªìm 9 ho·∫∑c 12 s·ªë",
      (val) => !val || /^0(?:\d{8}|\d{11})$/.test(val)
    ),

  danToc: yup
    .string()
    .transform((v) => {
      if (typeof v !== "string") return null
      const s = v.trim()
      return s === "" ? null : s
    })
    .nullable()
    .matches(/^[A-Za-z√Ä-·ªπ\s]+$/, {
      message: "D√¢n t·ªôc ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i",
      excludeEmptyString: true,
    }),
})

export type HoSo = yup.InferType<typeof hoSoSchema>

export const passwordChangeSchema = yup.object({
  oldPassword: yup.string().trim().required("Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i"),
  newPassword: yup
    .string()
    .trim()
    .min(6, "M·∫≠t kh·∫©u m·ªõi ph·∫£i ‚â• 6 k√Ω t·ª±")
    .required("Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi"),
})
export type PasswordChange = yup.InferType<typeof passwordChangeSchema>
